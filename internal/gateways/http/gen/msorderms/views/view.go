// Code generated by goa v3.10.2, DO NOT EDIT.
//
// msorderms views
//
// Command:
// $ goa gen orderms/internal/gateways/http/design --output
// internal/gateways/http

package views

import (
	goa "goa.design/goa/v3/pkg"
)

// StatoOrdine is the viewed result type that is projected based on a view.
type StatoOrdine struct {
	// Type to project
	Projected *StatoOrdineView
	// View to render
	View string
}

// StatoOrdineView is a type that runs validations on a projected type.
type StatoOrdineView struct {
	// Id Ordine
	OrdineID    *string
	StatoOrdine *string
}

var (
	// StatoOrdineMap is a map indexing the attribute names of StatoOrdine by view
	// name.
	StatoOrdineMap = map[string][]string{
		"default": {
			"ordineId",
			"statoOrdine",
		},
	}
)

// ValidateStatoOrdine runs the validations defined on the viewed result type
// StatoOrdine.
func ValidateStatoOrdine(result *StatoOrdine) (err error) {
	switch result.View {
	case "default", "":
		err = ValidateStatoOrdineView(result.Projected)
	default:
		err = goa.InvalidEnumValueError("view", result.View, []interface{}{"default"})
	}
	return
}

// ValidateStatoOrdineView runs the validations defined on StatoOrdineView
// using the "default" view.
func ValidateStatoOrdineView(result *StatoOrdineView) (err error) {
	if result.StatoOrdine != nil {
		if !(*result.StatoOrdine == "da elaborare" || *result.StatoOrdine == "in elaborazione" || *result.StatoOrdine == "presa in carico" || *result.StatoOrdine == "confermato" || *result.StatoOrdine == "annullato") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("result.statoOrdine", *result.StatoOrdine, []interface{}{"da elaborare", "in elaborazione", "presa in carico", "confermato", "annullato"}))
		}
	}
	return
}
