// Code generated by goa v3.10.2, DO NOT EDIT.
//
// msorderms endpoints
//
// Command:
// $ goa gen orderms/internal/gateways/http/design --output
// internal/gateways/http

package msorderms

import (
	"context"

	goa "goa.design/goa/v3/pkg"
)

// Endpoints wraps the "msorderms" service endpoints.
type Endpoints struct {
	SayHello           goa.Endpoint
	GetStatusOrderByID goa.Endpoint
	CreateOrder        goa.Endpoint
}

// NewEndpoints wraps the methods of the "msorderms" service with endpoints.
func NewEndpoints(s Service) *Endpoints {
	return &Endpoints{
		SayHello:           NewSayHelloEndpoint(s),
		GetStatusOrderByID: NewGetStatusOrderByIDEndpoint(s),
		CreateOrder:        NewCreateOrderEndpoint(s),
	}
}

// Use applies the given middleware to all the "msorderms" service endpoints.
func (e *Endpoints) Use(m func(goa.Endpoint) goa.Endpoint) {
	e.SayHello = m(e.SayHello)
	e.GetStatusOrderByID = m(e.GetStatusOrderByID)
	e.CreateOrder = m(e.CreateOrder)
}

// NewSayHelloEndpoint returns an endpoint function that calls the method
// "sayHello" of service "msorderms".
func NewSayHelloEndpoint(s Service) goa.Endpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		p := req.(*SayHelloPayload)
		return s.SayHello(ctx, p)
	}
}

// NewGetStatusOrderByIDEndpoint returns an endpoint function that calls the
// method "getStatusOrderById" of service "msorderms".
func NewGetStatusOrderByIDEndpoint(s Service) goa.Endpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		p := req.(*GetStatusOrderByIDPayload)
		res, err := s.GetStatusOrderByID(ctx, p)
		if err != nil {
			return nil, err
		}
		vres := NewViewedStatoOrdine(res, "default")
		return vres, nil
	}
}

// NewCreateOrderEndpoint returns an endpoint function that calls the method
// "createOrder" of service "msorderms".
func NewCreateOrderEndpoint(s Service) goa.Endpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		p := req.(*OrdineRequest)
		res, err := s.CreateOrder(ctx, p)
		if err != nil {
			return nil, err
		}
		vres := NewViewedStatoOrdine(res, "default")
		return vres, nil
	}
}
