// Code generated by goa v3.10.2, DO NOT EDIT.
//
// msorderms HTTP client types
//
// Command:
// $ goa gen orderms/internal/gateways/http/design --output
// internal/gateways/http

package client

import (
	msorderms "orderms/internal/gateways/http/gen/msorderms"

	goa "goa.design/goa/v3/pkg"
)

// CreateOrderRequestBody is the type of the "msorderms" service "CreateOrder"
// endpoint HTTP request body.
type CreateOrderRequestBody struct {
	// Id Ordine
	IDOrdine string `form:"idOrdine" json:"idOrdine" xml:"idOrdine"`
	// Codice Store
	Store string `form:"store" json:"store" xml:"store"`
	// Data Ordine
	DataOrdine *string `form:"dataOrdine,omitempty" json:"dataOrdine,omitempty" xml:"dataOrdine,omitempty"`
	// Tipologia Ordine
	TipologiaOrdine string `form:"tipologiaOrdine" json:"tipologiaOrdine" xml:"tipologiaOrdine"`
	// Nome Cliente
	NomeCliente *string `form:"nomeCliente,omitempty" json:"nomeCliente,omitempty" xml:"nomeCliente,omitempty"`
	// Cognome Cliente
	CognomeCliente *string `form:"cognomeCliente,omitempty" json:"cognomeCliente,omitempty" xml:"cognomeCliente,omitempty"`
	// Righe Ordine
	RigheOrdine []*RigaOrdineRequestBody `form:"righeOrdine,omitempty" json:"righeOrdine,omitempty" xml:"righeOrdine,omitempty"`
}

// CreateOrderResponseBody is the type of the "msorderms" service "CreateOrder"
// endpoint HTTP response body.
type CreateOrderResponseBody struct {
	// Id Ordine
	OrdineID    *string `form:"ordineId,omitempty" json:"ordineId,omitempty" xml:"ordineId,omitempty"`
	StatoOrdine *string `form:"statoOrdine,omitempty" json:"statoOrdine,omitempty" xml:"statoOrdine,omitempty"`
}

// GetStatusOrderByIDResponseBody is the type of the "msorderms" service
// "GetStatusOrderById" endpoint HTTP response body.
type GetStatusOrderByIDResponseBody struct {
	// Id Ordine
	OrdineID    *string `form:"ordineId,omitempty" json:"ordineId,omitempty" xml:"ordineId,omitempty"`
	StatoOrdine *string `form:"statoOrdine,omitempty" json:"statoOrdine,omitempty" xml:"statoOrdine,omitempty"`
}

// RigaOrdineRequestBody is used to define fields on request body types.
type RigaOrdineRequestBody struct {
	// Barcode Articolo
	Barcode string `form:"barcode" json:"barcode" xml:"barcode"`
	// Codice Articolo
	Modello *string `form:"modello,omitempty" json:"modello,omitempty" xml:"modello,omitempty"`
	// Codice Colore
	Colore *string `form:"colore,omitempty" json:"colore,omitempty" xml:"colore,omitempty"`
	// Codice Taglia
	Taglia *string `form:"taglia,omitempty" json:"taglia,omitempty" xml:"taglia,omitempty"`
	// Numero pezzi
	Quantita int `form:"quantita" json:"quantita" xml:"quantita"`
	// Prezzo
	Prezzo *float32 `form:"prezzo,omitempty" json:"prezzo,omitempty" xml:"prezzo,omitempty"`
}

// NewCreateOrderRequestBody builds the HTTP request body from the payload of
// the "CreateOrder" endpoint of the "msorderms" service.
func NewCreateOrderRequestBody(p *msorderms.OrdineRequest) *CreateOrderRequestBody {
	body := &CreateOrderRequestBody{
		IDOrdine:        p.IDOrdine,
		Store:           p.Store,
		DataOrdine:      p.DataOrdine,
		TipologiaOrdine: p.TipologiaOrdine,
		NomeCliente:     p.NomeCliente,
		CognomeCliente:  p.CognomeCliente,
	}
	if p.RigheOrdine != nil {
		body.RigheOrdine = make([]*RigaOrdineRequestBody, len(p.RigheOrdine))
		for i, val := range p.RigheOrdine {
			body.RigheOrdine[i] = marshalMsordermsRigaOrdineToRigaOrdineRequestBody(val)
		}
	}
	return body
}

// NewCreateOrderStatoOrdineCreated builds a "msorderms" service "CreateOrder"
// endpoint result from a HTTP "Created" response.
func NewCreateOrderStatoOrdineCreated(body *CreateOrderResponseBody) *msorderms.StatoOrdine {
	v := &msorderms.StatoOrdine{
		OrdineID:    body.OrdineID,
		StatoOrdine: body.StatoOrdine,
	}

	return v
}

// NewGetStatusOrderByIDStatoOrdineOK builds a "msorderms" service
// "GetStatusOrderById" endpoint result from a HTTP "OK" response.
func NewGetStatusOrderByIDStatoOrdineOK(body *GetStatusOrderByIDResponseBody) *msorderms.StatoOrdine {
	v := &msorderms.StatoOrdine{
		OrdineID:    body.OrdineID,
		StatoOrdine: body.StatoOrdine,
	}

	return v
}

// ValidateCreateOrderResponseBody runs the validations defined on
// CreateOrderResponseBody
func ValidateCreateOrderResponseBody(body *CreateOrderResponseBody) (err error) {
	if body.StatoOrdine != nil {
		if !(*body.StatoOrdine == "da elaborare" || *body.StatoOrdine == "in elaborazione" || *body.StatoOrdine == "presa in carico" || *body.StatoOrdine == "confermato" || *body.StatoOrdine == "annullato") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.statoOrdine", *body.StatoOrdine, []interface{}{"da elaborare", "in elaborazione", "presa in carico", "confermato", "annullato"}))
		}
	}
	return
}

// ValidateGetStatusOrderByIDResponseBody runs the validations defined on
// GetStatusOrderByIdResponseBody
func ValidateGetStatusOrderByIDResponseBody(body *GetStatusOrderByIDResponseBody) (err error) {
	if body.StatoOrdine != nil {
		if !(*body.StatoOrdine == "da elaborare" || *body.StatoOrdine == "in elaborazione" || *body.StatoOrdine == "presa in carico" || *body.StatoOrdine == "confermato" || *body.StatoOrdine == "annullato") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.statoOrdine", *body.StatoOrdine, []interface{}{"da elaborare", "in elaborazione", "presa in carico", "confermato", "annullato"}))
		}
	}
	return
}
