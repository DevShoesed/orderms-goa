// Code generated by goa v3.10.2, DO NOT EDIT.
//
// msorderms HTTP client types
//
// Command:
// $ goa gen orderms/internal/gateways/http/design --output
// internal/gateways/http

package client

import (
	msorderms "orderms/internal/gateways/http/gen/msorderms"
	msordermsviews "orderms/internal/gateways/http/gen/msorderms/views"

	goa "goa.design/goa/v3/pkg"
)

// CreateOrderRequestBody is the type of the "msorderms" service "createOrder"
// endpoint HTTP request body.
type CreateOrderRequestBody struct {
	// Id Ordine
	IDOrdine string `form:"idOrdine" json:"idOrdine" xml:"idOrdine"`
	// Codice Store
	Store string `form:"store" json:"store" xml:"store"`
	// Data Ordine
	DataOrdine *string `form:"dataOrdine,omitempty" json:"dataOrdine,omitempty" xml:"dataOrdine,omitempty"`
	// Tipologia Ordine
	TipologiaOrdine string `form:"tipologiaOrdine" json:"tipologiaOrdine" xml:"tipologiaOrdine"`
	// Nome Cliente
	NomeCliente *string `form:"nomeCliente,omitempty" json:"nomeCliente,omitempty" xml:"nomeCliente,omitempty"`
	// Cognome Cliente
	CognomeCliente *string `form:"cognomeCliente,omitempty" json:"cognomeCliente,omitempty" xml:"cognomeCliente,omitempty"`
	// Righe Ordine
	RigheOrdine []*RigaOrdineRequestBody `form:"righeOrdine,omitempty" json:"righeOrdine,omitempty" xml:"righeOrdine,omitempty"`
}

// GetStatusOrderByIDResponseBody is the type of the "msorderms" service
// "getStatusOrderById" endpoint HTTP response body.
type GetStatusOrderByIDResponseBody struct {
	// Id Ordine
	OrdineID    *string `form:"ordineId,omitempty" json:"ordineId,omitempty" xml:"ordineId,omitempty"`
	StatoOrdine *string `form:"statoOrdine,omitempty" json:"statoOrdine,omitempty" xml:"statoOrdine,omitempty"`
}

// CreateOrderResponseBody is the type of the "msorderms" service "createOrder"
// endpoint HTTP response body.
type CreateOrderResponseBody struct {
	// Id Ordine
	OrdineID    *string `form:"ordineId,omitempty" json:"ordineId,omitempty" xml:"ordineId,omitempty"`
	StatoOrdine *string `form:"statoOrdine,omitempty" json:"statoOrdine,omitempty" xml:"statoOrdine,omitempty"`
}

// GetStatusOrderByIDNoMatchResponseBody is the type of the "msorderms" service
// "getStatusOrderById" endpoint HTTP response body for the "no_match" error.
type GetStatusOrderByIDNoMatchResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// RigaOrdineRequestBody is used to define fields on request body types.
type RigaOrdineRequestBody struct {
	// Barcode Articolo
	Barcode string `form:"barcode" json:"barcode" xml:"barcode"`
	// Codice Articolo
	Modello *string `form:"modello,omitempty" json:"modello,omitempty" xml:"modello,omitempty"`
	// Codice Colore
	Colore *string `form:"colore,omitempty" json:"colore,omitempty" xml:"colore,omitempty"`
	// Codice Taglia
	Taglia *string `form:"taglia,omitempty" json:"taglia,omitempty" xml:"taglia,omitempty"`
	// Numero pezzi
	Quantita int `form:"quantita" json:"quantita" xml:"quantita"`
	// Prezzo
	Prezzo *float32 `form:"prezzo,omitempty" json:"prezzo,omitempty" xml:"prezzo,omitempty"`
}

// NewCreateOrderRequestBody builds the HTTP request body from the payload of
// the "createOrder" endpoint of the "msorderms" service.
func NewCreateOrderRequestBody(p *msorderms.OrdineRequest) *CreateOrderRequestBody {
	body := &CreateOrderRequestBody{
		IDOrdine:        p.IDOrdine,
		Store:           p.Store,
		DataOrdine:      p.DataOrdine,
		TipologiaOrdine: p.TipologiaOrdine,
		NomeCliente:     p.NomeCliente,
		CognomeCliente:  p.CognomeCliente,
	}
	if p.RigheOrdine != nil {
		body.RigheOrdine = make([]*RigaOrdineRequestBody, len(p.RigheOrdine))
		for i, val := range p.RigheOrdine {
			body.RigheOrdine[i] = marshalMsordermsRigaOrdineToRigaOrdineRequestBody(val)
		}
	}
	return body
}

// NewGetStatusOrderByIDStatoOrdineOK builds a "msorderms" service
// "getStatusOrderById" endpoint result from a HTTP "OK" response.
func NewGetStatusOrderByIDStatoOrdineOK(body *GetStatusOrderByIDResponseBody) *msordermsviews.StatoOrdineView {
	v := &msordermsviews.StatoOrdineView{
		OrdineID:    body.OrdineID,
		StatoOrdine: body.StatoOrdine,
	}

	return v
}

// NewGetStatusOrderByIDNoMatch builds a msorderms service getStatusOrderById
// endpoint no_match error.
func NewGetStatusOrderByIDNoMatch(body *GetStatusOrderByIDNoMatchResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewCreateOrderStatoOrdineCreated builds a "msorderms" service "createOrder"
// endpoint result from a HTTP "Created" response.
func NewCreateOrderStatoOrdineCreated(body *CreateOrderResponseBody) *msordermsviews.StatoOrdineView {
	v := &msordermsviews.StatoOrdineView{
		OrdineID:    body.OrdineID,
		StatoOrdine: body.StatoOrdine,
	}

	return v
}

// NewCreateOrderNoCriteria builds a msorderms service createOrder endpoint
// no_criteria error.
func NewCreateOrderNoCriteria(body string) msorderms.NoCriteria {
	v := msorderms.NoCriteria(body)

	return v
}

// ValidateGetStatusOrderByIDNoMatchResponseBody runs the validations defined
// on getStatusOrderById_no_match_response_body
func ValidateGetStatusOrderByIDNoMatchResponseBody(body *GetStatusOrderByIDNoMatchResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}
