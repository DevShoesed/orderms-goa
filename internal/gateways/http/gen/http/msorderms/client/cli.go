// Code generated by goa v3.10.2, DO NOT EDIT.
//
// msorderms HTTP client CLI support package
//
// Command:
// $ goa gen orderms/internal/gateways/http/design --output
// internal/gateways/http

package client

import (
	"encoding/json"
	"fmt"
	msorderms "orderms/internal/gateways/http/gen/msorderms"

	goa "goa.design/goa/v3/pkg"
)

// BuildSayHelloPayload builds the payload for the msorderms sayHello endpoint
// from CLI flags.
func BuildSayHelloPayload(msordermsSayHelloName string) (*msorderms.SayHelloPayload, error) {
	var name string
	{
		name = msordermsSayHelloName
	}
	v := &msorderms.SayHelloPayload{}
	v.Name = name

	return v, nil
}

// BuildGetStatusOrderByIDPayload builds the payload for the msorderms
// getStatusOrderById endpoint from CLI flags.
func BuildGetStatusOrderByIDPayload(msordermsGetStatusOrderByIDIDOrdine string) (*msorderms.GetStatusOrderByIDPayload, error) {
	var idOrdine string
	{
		idOrdine = msordermsGetStatusOrderByIDIDOrdine
	}
	v := &msorderms.GetStatusOrderByIDPayload{}
	v.IDOrdine = idOrdine

	return v, nil
}

// BuildCreateOrderPayload builds the payload for the msorderms createOrder
// endpoint from CLI flags.
func BuildCreateOrderPayload(msordermsCreateOrderBody string) (*msorderms.OrdineRequest, error) {
	var err error
	var body CreateOrderRequestBody
	{
		err = json.Unmarshal([]byte(msordermsCreateOrderBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"cognomeCliente\": \"Facilis est consectetur enim expedita consectetur.\",\n      \"dataOrdine\": \"Aspernatur dignissimos voluptatibus architecto id.\",\n      \"idOrdine\": \"Et soluta rerum aut.\",\n      \"nomeCliente\": \"Sapiente aut ipsam adipisci voluptatum modi.\",\n      \"righeOrdine\": [\n         {\n            \"barcode\": \"Et consectetur.\",\n            \"colore\": \"Voluptatem non sunt ea.\",\n            \"modello\": \"Alias tenetur.\",\n            \"prezzo\": 0.78429174,\n            \"quantita\": 7708216444412231043,\n            \"taglia\": \"Nobis minima sit a qui.\"\n         },\n         {\n            \"barcode\": \"Et consectetur.\",\n            \"colore\": \"Voluptatem non sunt ea.\",\n            \"modello\": \"Alias tenetur.\",\n            \"prezzo\": 0.78429174,\n            \"quantita\": 7708216444412231043,\n            \"taglia\": \"Nobis minima sit a qui.\"\n         }\n      ],\n      \"store\": \"Sed ut reiciendis quisquam ipsa.\",\n      \"tipologiaOrdine\": \"negozio\"\n   }'")
		}
		if !(body.TipologiaOrdine == "corriere" || body.TipologiaOrdine == "negozio") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.tipologiaOrdine", body.TipologiaOrdine, []interface{}{"corriere", "negozio"}))
		}
		if err != nil {
			return nil, err
		}
	}
	v := &msorderms.OrdineRequest{
		IDOrdine:        body.IDOrdine,
		Store:           body.Store,
		DataOrdine:      body.DataOrdine,
		TipologiaOrdine: body.TipologiaOrdine,
		NomeCliente:     body.NomeCliente,
		CognomeCliente:  body.CognomeCliente,
	}
	if body.RigheOrdine != nil {
		v.RigheOrdine = make([]*msorderms.RigaOrdine, len(body.RigheOrdine))
		for i, val := range body.RigheOrdine {
			v.RigheOrdine[i] = marshalRigaOrdineRequestBodyToMsordermsRigaOrdine(val)
		}
	}

	return v, nil
}
