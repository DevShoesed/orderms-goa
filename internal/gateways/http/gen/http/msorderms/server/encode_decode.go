// Code generated by goa v3.10.2, DO NOT EDIT.
//
// msorderms HTTP server encoders and decoders
//
// Command:
// $ goa gen orderms/internal/gateways/http/design --output
// internal/gateways/http

package server

import (
	"context"
	"io"
	"net/http"
	msorderms "orderms/internal/gateways/http/gen/msorderms"

	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// EncodeSayHelloResponse returns an encoder for responses returned by the
// msorderms SayHello endpoint.
func EncodeSayHelloResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, interface{}) error {
	return func(ctx context.Context, w http.ResponseWriter, v interface{}) error {
		res, _ := v.(string)
		enc := encoder(ctx, w)
		body := res
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// DecodeSayHelloRequest returns a decoder for requests sent to the msorderms
// SayHello endpoint.
func DecodeSayHelloRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (interface{}, error) {
	return func(r *http.Request) (interface{}, error) {
		var (
			name string
			err  error
		)
		name = r.URL.Query().Get("name")
		if name == "" {
			err = goa.MergeErrors(err, goa.MissingFieldError("name", "query string"))
		}
		if err != nil {
			return nil, err
		}
		payload := NewSayHelloPayload(name)

		return payload, nil
	}
}

// EncodeCreateOrderResponse returns an encoder for responses returned by the
// msorderms CreateOrder endpoint.
func EncodeCreateOrderResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, interface{}) error {
	return func(ctx context.Context, w http.ResponseWriter, v interface{}) error {
		res, _ := v.(*msorderms.StatoOrdine)
		enc := encoder(ctx, w)
		body := NewCreateOrderResponseBody(res)
		w.WriteHeader(http.StatusCreated)
		return enc.Encode(body)
	}
}

// DecodeCreateOrderRequest returns a decoder for requests sent to the
// msorderms CreateOrder endpoint.
func DecodeCreateOrderRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (interface{}, error) {
	return func(r *http.Request) (interface{}, error) {
		var (
			body CreateOrderRequestBody
			err  error
		)
		err = decoder(r).Decode(&body)
		if err != nil {
			if err == io.EOF {
				return nil, goa.MissingPayloadError()
			}
			return nil, goa.DecodePayloadError(err.Error())
		}
		err = ValidateCreateOrderRequestBody(&body)
		if err != nil {
			return nil, err
		}
		payload := NewCreateOrderOrdineRequest(&body)

		return payload, nil
	}
}

// EncodeGetStatusOrderByIDResponse returns an encoder for responses returned
// by the msorderms GetStatusOrderById endpoint.
func EncodeGetStatusOrderByIDResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, interface{}) error {
	return func(ctx context.Context, w http.ResponseWriter, v interface{}) error {
		res, _ := v.(*msorderms.StatoOrdine)
		enc := encoder(ctx, w)
		body := NewGetStatusOrderByIDResponseBody(res)
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// DecodeGetStatusOrderByIDRequest returns a decoder for requests sent to the
// msorderms GetStatusOrderById endpoint.
func DecodeGetStatusOrderByIDRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (interface{}, error) {
	return func(r *http.Request) (interface{}, error) {
		var (
			idOrdine string

			params = mux.Vars(r)
		)
		idOrdine = params["idOrdine"]
		payload := NewGetStatusOrderByIDPayload(idOrdine)

		return payload, nil
	}
}

// unmarshalRigaOrdineRequestBodyToMsordermsRigaOrdine builds a value of type
// *msorderms.RigaOrdine from a value of type *RigaOrdineRequestBody.
func unmarshalRigaOrdineRequestBodyToMsordermsRigaOrdine(v *RigaOrdineRequestBody) *msorderms.RigaOrdine {
	if v == nil {
		return nil
	}
	res := &msorderms.RigaOrdine{
		Barcode:  *v.Barcode,
		Modello:  v.Modello,
		Colore:   v.Colore,
		Taglia:   v.Taglia,
		Quantita: *v.Quantita,
		Prezzo:   v.Prezzo,
	}

	return res
}
