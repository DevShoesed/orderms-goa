// Code generated by goa v3.10.2, DO NOT EDIT.
//
// msorderms HTTP client CLI support package
//
// Command:
// $ goa gen orderms/internal/gateways/http/design --output
// internal/gateways/http

package cli

import (
	"flag"
	"fmt"
	"net/http"
	msordermsc "orderms/internal/gateways/http/gen/http/msorderms/client"
	"os"

	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// UsageCommands returns the set of commands and sub-commands using the format
//
//    command (subcommand1|subcommand2|...)
//
func UsageCommands() string {
	return `msorderms (say-hello|create-order|get-status-order-by-id)
`
}

// UsageExamples produces an example of a valid invocation of the CLI tool.
func UsageExamples() string {
	return os.Args[0] + ` msorderms say-hello --name "Officia qui et et amet laudantium."` + "\n" +
		""
}

// ParseEndpoint returns the endpoint and payload as specified on the command
// line.
func ParseEndpoint(
	scheme, host string,
	doer goahttp.Doer,
	enc func(*http.Request) goahttp.Encoder,
	dec func(*http.Response) goahttp.Decoder,
	restore bool,
) (goa.Endpoint, interface{}, error) {
	var (
		msordermsFlags = flag.NewFlagSet("msorderms", flag.ContinueOnError)

		msordermsSayHelloFlags    = flag.NewFlagSet("say-hello", flag.ExitOnError)
		msordermsSayHelloNameFlag = msordermsSayHelloFlags.String("name", "REQUIRED", "")

		msordermsCreateOrderFlags    = flag.NewFlagSet("create-order", flag.ExitOnError)
		msordermsCreateOrderBodyFlag = msordermsCreateOrderFlags.String("body", "REQUIRED", "")

		msordermsGetStatusOrderByIDFlags        = flag.NewFlagSet("get-status-order-by-id", flag.ExitOnError)
		msordermsGetStatusOrderByIDIDOrdineFlag = msordermsGetStatusOrderByIDFlags.String("id-ordine", "REQUIRED", "IdOrdine")
	)
	msordermsFlags.Usage = msordermsUsage
	msordermsSayHelloFlags.Usage = msordermsSayHelloUsage
	msordermsCreateOrderFlags.Usage = msordermsCreateOrderUsage
	msordermsGetStatusOrderByIDFlags.Usage = msordermsGetStatusOrderByIDUsage

	if err := flag.CommandLine.Parse(os.Args[1:]); err != nil {
		return nil, nil, err
	}

	if flag.NArg() < 2 { // two non flag args are required: SERVICE and ENDPOINT (aka COMMAND)
		return nil, nil, fmt.Errorf("not enough arguments")
	}

	var (
		svcn string
		svcf *flag.FlagSet
	)
	{
		svcn = flag.Arg(0)
		switch svcn {
		case "msorderms":
			svcf = msordermsFlags
		default:
			return nil, nil, fmt.Errorf("unknown service %q", svcn)
		}
	}
	if err := svcf.Parse(flag.Args()[1:]); err != nil {
		return nil, nil, err
	}

	var (
		epn string
		epf *flag.FlagSet
	)
	{
		epn = svcf.Arg(0)
		switch svcn {
		case "msorderms":
			switch epn {
			case "say-hello":
				epf = msordermsSayHelloFlags

			case "create-order":
				epf = msordermsCreateOrderFlags

			case "get-status-order-by-id":
				epf = msordermsGetStatusOrderByIDFlags

			}

		}
	}
	if epf == nil {
		return nil, nil, fmt.Errorf("unknown %q endpoint %q", svcn, epn)
	}

	// Parse endpoint flags if any
	if svcf.NArg() > 1 {
		if err := epf.Parse(svcf.Args()[1:]); err != nil {
			return nil, nil, err
		}
	}

	var (
		data     interface{}
		endpoint goa.Endpoint
		err      error
	)
	{
		switch svcn {
		case "msorderms":
			c := msordermsc.NewClient(scheme, host, doer, enc, dec, restore)
			switch epn {
			case "say-hello":
				endpoint = c.SayHello()
				data, err = msordermsc.BuildSayHelloPayload(*msordermsSayHelloNameFlag)
			case "create-order":
				endpoint = c.CreateOrder()
				data, err = msordermsc.BuildCreateOrderPayload(*msordermsCreateOrderBodyFlag)
			case "get-status-order-by-id":
				endpoint = c.GetStatusOrderByID()
				data, err = msordermsc.BuildGetStatusOrderByIDPayload(*msordermsGetStatusOrderByIDIDOrdineFlag)
			}
		}
	}
	if err != nil {
		return nil, nil, err
	}

	return endpoint, data, nil
}

// msordermsUsage displays the usage of the msorderms command and its
// subcommands.
func msordermsUsage() {
	fmt.Fprintf(os.Stderr, `The service manager order
Usage:
    %[1]s [globalflags] msorderms COMMAND [flags]

COMMAND:
    say-hello: SayHello implements SayHello.
    create-order: CreateOrder implements CreateOrder.
    get-status-order-by-id: GetStatusOrderByID implements GetStatusOrderById.

Additional help:
    %[1]s msorderms COMMAND --help
`, os.Args[0])
}
func msordermsSayHelloUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] msorderms say-hello -name STRING

SayHello implements SayHello.
    -name STRING: 

Example:
    %[1]s msorderms say-hello --name "Officia qui et et amet laudantium."
`, os.Args[0])
}

func msordermsCreateOrderUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] msorderms create-order -body JSON

CreateOrder implements CreateOrder.
    -body JSON: 

Example:
    %[1]s msorderms create-order --body '{
      "cognomeCliente": "Nostrum aspernatur dignissimos voluptatibus architecto id.",
      "dataOrdine": "Et soluta rerum aut.",
      "idOrdine": "Similique iusto harum illum voluptas eos.",
      "nomeCliente": "Ut reiciendis quisquam.",
      "righeOrdine": [
         {
            "barcode": "Sapiente aut ipsam adipisci voluptatum modi.",
            "colore": "Repellendus et consectetur placeat alias tenetur maiores.",
            "modello": "Facilis est consectetur enim expedita consectetur.",
            "prezzo": 0.46302,
            "quantita": 3961194039189103112,
            "taglia": "Non sunt ea."
         },
         {
            "barcode": "Sapiente aut ipsam adipisci voluptatum modi.",
            "colore": "Repellendus et consectetur placeat alias tenetur maiores.",
            "modello": "Facilis est consectetur enim expedita consectetur.",
            "prezzo": 0.46302,
            "quantita": 3961194039189103112,
            "taglia": "Non sunt ea."
         }
      ],
      "store": "Occaecati quis eum placeat.",
      "tipologiaOrdine": "corriere"
   }'
`, os.Args[0])
}

func msordermsGetStatusOrderByIDUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] msorderms get-status-order-by-id -id-ordine STRING

GetStatusOrderByID implements GetStatusOrderById.
    -id-ordine STRING: IdOrdine

Example:
    %[1]s msorderms get-status-order-by-id --id-ordine "Repellendus quae excepturi labore asperiores dolorem ducimus."
`, os.Args[0])
}
